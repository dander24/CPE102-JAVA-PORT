functional interface
interface action
action create action
	void run
	
	
A*

based on estimate of cost to reach goal

f(x) = g(x) + h(x)  

g(x) is actual cost to reach this node from start
h(x) is estimate of cost from this node to the goal (heuristic / educated guess)


keep and open set
	- on the fringe/frontier of search
		ordered by f-values
		
		
h - manhattan distance (distance in x and y, no diagnal)

see wikipedia for A* pseudocode


Generics

interface List<T>

List<String>

class Pair<T,R>


Linked data structure

node
[ data and link to next node]

array list is better for random acess

linked list better for insert and remove

public LList<T>
{
	private LLNode head;
	
	public LList()
	{
		head = null;
	}
	
	public int size()
	{
		int i = 0;
		LLNode cur = head;
		while (head != null){
			i++;
			cur = cur.next();}
			
		return i;
	}
			
}

public class LLNode<T>
{
	public T value;
	public LLNode<T> next;
}

			